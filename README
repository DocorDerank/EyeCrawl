EyeCrawl - x86 disassembler (Copyright 2019)

This is a project I started just a few days ago...
Didn't even realize it'd work as good as it is today.

The goal of this project was not only to convert bytes to instructions,
but to get the offsets of registers, in order to dump structs.
It does just that.


It also allows you to easily access 8/16/32 bit values in
both the first or second operand of the instruction,
opening up huge possibilities, such as checking if an
ECX or EDX register was used without being pushed,
allowing you one way to identify a calling convention.

If you wanted to debug an address and view the contents of any
register or any offset of that register,
simply hook up the debug function and have your result.

Although this is WIP/limited(does not have every instruction yet)
this is still very functional.

Please give credit to static/THEDOOMED/me.



How to use:

Simply include the EyeCrawl namespace,
and after you call OpenProcess on your target program, insert this:
EyeCrawl::set(process_handle);

now to read an instruction:
pinstruction p = disassemble(0xDEADBEEF);
printf("Disassembly: %s\n", p->data);
delete p;

Or, to readout an entire function, with multiple display options:
int ninstructions = 20;
std::string data = disassemble(0xDEADBEEF, ninstructions, info_mode::show_ioffsets);
printf("Disassembly:\n\n%s\n", data.c_str());

OR, say you wanna debug a function and get the first arg passed to it:
UINT_PTR gettop = aslr(0x7F1F40);
printf("Lua State: %08X.\n", util::debug32(gettop+6,R_EBP,8));

(Notice memcheck wont shut you down for this as it is swapped out immediately after)
(Thank you RoboMat, this gettop idea works pretty well)

It's up to you how you use this.
More tutorials soon to come...

