EyeCrawl - x86 disassembler

This is a project I started just a few days ago...
Didn't even realize it'd work as good as it is today.

The goal of this project was not only to convert bytes to instructions,
but to get the offsets of registers, in order to dump structs.
I believe this solves that.

It also allows you to analyze the first or second operand of the
instruction for 8/16/32 bit values.
If you wanted to capture every instruction starting with an esi register
or an offset of esi in a function, this can do just that.

So if this was ever a struggle to you, say no more.
Although this is WIP and limited(It does not have every instruction yet)
this is still a functional disassembler that you can easily include.

Please give credit to static/THEDOOMED/me.



How to use:

Simply include the EyeCrawl namespace,
and after you call OpenProcess on your target program, insert this:
EyeCrawl::set(process_handle);

now to read an instruction:
pinstruction p = disassemble(0xDEADBEEF);
printf("Disassembly: %s\n", p->data);
delete p;

Or, to readout an entire function, with multiple display options:
int ninstructions = 20;
std::string data = disassemble(0xDEADBEEF, ninstructions, info_mode::show_ioffsets);
printf("Disassembly:\n\n%s\n", data.c_str());

It's up to you how you use this.
More tutorials soon to come...

